<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog de Chris]]></title><description><![CDATA[Apasionado por el desarrollo de software, los videojuegos y series de tv]]></description><link>https://chrizco.github.io</link><image><url>https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/cover-image.jpg</url><title>Blog de Chris</title><link>https://chrizco.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Fri, 20 Oct 2017 10:19:26 GMT</lastBuildDate><atom:link href="https://chrizco.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Desarrolla hacks para videojuegos]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>En mi post <a href="http://blog-quickhub.rhcloud.com/2016/04/29/inyeccion-de-dll/" target="_blank">anterior</a> comente que haríamos nuestros propios hacks para videojuegos, ese el es motivo de este post. Para esto sólo escribiremos un par de líneas de código, así que, no es necesario ser un experto programando, con tener saber lo básico basta. Usaremos C++ para el desarrollo de nuestros hacks, este tipo de hacks nos permitirán controlar las variables de los videojuegos, donde se almacenan lo puntos de vida, municiones, mana, etc.</p>
</div>
<div class="paragraph">
<p>Empezare por explicar un par de cosas, para comprender mejor todo este rollo.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_puntero">Puntero</h2>
<div class="sectionbody">
<div class="paragraph">
<p>&#160;<br>
Un puntero es una variable que almacena direcciones de memoria. También llamado apuntador. Por lo general, una variable contiene un valor específico. Sin embargo, un puntero contiene la dirección de memoria de una variable, la cual contiene un valor específico.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/1.png" alt="1.png">
</div>
</div>
<div class="paragraph">
<p>Representación gráfica del puntero xPtr apuntando a la variable x.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/2.png" alt="2.png">
</div>
</div>
<div class="paragraph">
<p>Representación gráfica del puntero xPtr y la variable x en memoria.</p>
</div>
<div class="sect3">
<h4 id="_punteros_en_c">Punteros en C++</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">int x = 7;

int *xPtr = &amp;x;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Cuando aparece un * en una declaración, indica que la variable que se esta declarando es un puntero. El &amp; es un operador unario que obtiene la dirección de memoria de su operando.</p>
</div>
<div class="paragraph">
<p>Para desarrollar nuestros hacks para videojuegos, primero buscaremos los punteros que apunten a las variables que almacenan los puntos de vida, municiones, etc.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_herramientas">Herramientas</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="http://assault.cubers.net/download.html" target="_blank">AssaultCube 1.2.0.2</a></p>
</li>
<li>
<p><a href="http://www.cheatengine.org/downloads.php" target="_blank">Cheat Engine</a></p>
</li>
<li>
<p><a href="http://www.codeblocks.org/downloads/26" target="_blank">CodeBlocks</a></p>
</li>
<li>
<p><a href="http://blog-quickhub.rhcloud.com/2016/04/29/inyeccion-de-dll/" target="_blank">Inyector DLL</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Cabe decir que trabajaremos sobre Windows. El hack que desarrollaremos sera para AssaultCube un videojuego multiplayer, first-person shooter.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_b_squeda_de_punteros">Búsqueda de punteros</h2>
<div class="sectionbody">
<div class="paragraph">
<p>&#160;<br>
<em>*Nota:* este post no es un tutorial o manual sobre Cheat Engine, en caso de querer desarrollar hacks para otros videojuegos tener en cuanta que, la búsqueda de punteros puede ser más complicada y requiera ser más extensa o compleja. Hay muchos videotutoriales, tutoriales y manuales por internet para aprender más sobre Cheat Engine.</em></p>
</div>
<div class="paragraph">
<p>Abrimos AssaultCube. En la parte inferior de la pantalla de juego podemos ver la vida y la balas, las cuales tienen un puntaje de 100 y 20 respectivamente, estos valores nos servirán para buscar los punteros que necesitamos.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/3.jpg" alt="3.jpg">
</div>
</div>
<div class="paragraph">
<p>Abrimos Cheat Engine y hacemos click en el botón que esta encerrado por un recuadro que cambia de color, en la siguiente imagen esta de color rojo.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/4.jpg" alt="4.jpg">
</div>
</div>
<div class="paragraph">
<p>A continuación aparecerá una pequeña ventana, con una lista de procesos. Seleccionaremos el que termine en ac_cliente.exe, hacemos doble click en el o presionamos el botón Open.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/5.jpg" alt="5.jpg">
</div>
</div>
<div class="paragraph">
<p>Buscamos el valor de las balas, para ello escribimos el valor actual de las balas en el campo Value y hacemos click en First Scan.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/7.jpg" alt="7.jpg">
</div>
</div>
<div class="paragraph">
<p>Regresamos a AssaultCube y gustamos balas.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/6.jpg" alt="6.jpg">
</div>
</div>
<div class="paragraph">
<p>Regresamos a Cheat Engine, ahora buscaremos el número actual de balas que tenemos, lo escribimos en el campo Value y hacemos click en Next Scan. Han aparecido dos direcciones 08ADB5B8 y 0CECB26C (a ustedes no les tiene porque aparecer las mismas direcciones, pueden ser distintas), estas direcciones son las direcciones de las variables que contienen el valor de las balas, pero estas direcciones son dinámicas, es decir, si cerramos el videojuego o reiniciamos la computadora estas cambiaran, así no que nos sirven, para desarrollar nuestro hack necesitamos la dirección de un puntero, esta dirección debe ser estática y este puntero siempre deberá apuntar a la dirección de la variable que contiene el valor de las balas.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/9.jpg" alt="9.jpg">
</div>
</div>
<div class="paragraph">
<p>Hacemos doble click sobre la primera dirección, para agregarla a la lista de direcciones.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/10.jpg" alt="10.jpg">
</div>
</div>
<div class="paragraph">
<p>Hacemos click derecho sobre el primer y único elemento de la lista de direcciones y hacemos click izquierdo en la opción Pointer scan for this address.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/11.jpg" alt="11.jpg">
</div>
</div>
<div class="paragraph">
<p>Aparecerán dos ventanas. En la ventana Pointerscanner scanoptions dejamos las configuraciones como están y hacemos click en OK.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/12.jpg" alt="12.jpg">
</div>
</div>
<div class="paragraph">
<p>Iniciara la búsqueda de punteros, esta búsqueda puede tardar unos segundos o minutos.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/13.jpg" alt="13.jpg">
</div>
</div>
<div class="paragraph">
<p>Al finalizar la búsqueda nos mostrar todos los punteros que apuntan a la dirección donde se encuentran las balas.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/14.jpg" alt="14.jpg">
</div>
</div>
<div class="paragraph">
<p>Seleccionamos el elemento de la lista que tenga el nombre del proceso y menor número de offsets. En este caso seleccionare el segundo, hare doble click sobre el para agragarlo a la lista de direcciones, al agregar un puntero a la lista de direcciones Cheat Engine lo denota con P&#8594;.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/15.jpg" alt="15.jpg">
</div>
</div>
<div class="paragraph">
<p>Vamos a comprobar que es el puntero correcto. Cerramos AssaultCube, lo ejecutamos nuevamente y abrimos su proceso desde Cheat Engine. En mi caso al cerrar y ejecutar de nuevo AssaultCube no cambio la primera dirección, pero pudiera cambiar, la segunda no debería, hacemos doble click sobre su valor (19) para cambiarlo.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/16.jpg" alt="16.jpg">
</div>
</div>
<div class="paragraph">
<p>Cambie su valor por 20.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/17.jpg" alt="17.jpg">
</div>
</div>
<div class="paragraph">
<p>Hacemos doble click sobre el campo address del puntero. Se abrirá un pequeña ventana, en ella estarán los datos del puntero. Primero explicare que significa “ac_cliente.exe” esto hace referencia al entry point (punto de entrada) del ejecutable, este punto de entrada es aleatorio, cada que ejecutamos un programa puede cambiar.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/18.jpg" alt="18.jpg">
</div>
</div>
<div class="paragraph">
<p>Después tenemos <strong>00109B74</strong>, esta es una dirección estática. Si sumamos el entry point más la dirección anterior el resultado sera la dirección en memoria de un puntero que contiene una direcciones dinámica, si le sumamos <strong>150</strong> esta dirección dinámica tendremos el dirección en memoria donde se almacena el valor de las balas.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/chrizco/chrizco.github.io/master/images/post3/19.jpg" alt="19.jpg">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_proyecto_hack_videogame">Proyecto: Hack Videogame</h2>
<div class="sectionbody">
<div class="sect3">
<h4 id="_main_cpp">Main.cpp</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;windows.h&gt;

void Cheat()
{
    // Obtenemos el entry point
    DWORD entryPoint = (DWORD)GetModuleHandle(NULL);
    // Obtenemos la direccion del puntero estatico
    DWORD baseAddress = *(DWORD*)(entryPoint + 0x109B74);
    // Obtenemos la direccion donde se almacenan las balas
    DWORD bullets = baseAddress + 0x150;
    while (true)
    {
        // Asignamos el numero de balas
        *(DWORD*)bullets = 20;
        // Suspendemos la ejecución 200 milisegundos
        Sleep(200);
    }
}

BOOL APIENTRY DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    switch (fdwReason)
    {
        case DLL_PROCESS_ATTACH:
            // Ejecutamos la función Cheat en un hilo
            CreateThread(0, 0, (LPTHREAD_START_ROUTINE)Cheat, 0, 0, 0);
            break;

        case DLL_PROCESS_DETACH:
            break;

        case DLL_THREAD_ATTACH:
            break;

        case DLL_THREAD_DETACH:
            break;
    }
    return TRUE;
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_demostraci_n">Demostración</h2>
<div class="sectionbody">
<div class="paragraph">
<p></p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="500" height="375" src="https://www.youtube.com/embed/RmkjOVEFB3k?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_repositorio">Repositorio</h2>
<div class="sectionbody">
<div class="paragraph">
<p></p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/" target="_blank">Hack Videogame</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Les queda de tarea la parte de la vida y granadas. Cuando terminen de hacer sus hacks, por favor tomen una screenshot o graben un pequeño video y háganmelo llegar, ya sea por los comentarios o la página de facebook.</p>
</div>
</div>
</div>]]></description><link>https://chrizco.github.io/2017/10/20/Desarrolla-hacks-para-videojuegos.html</link><guid isPermaLink="true">https://chrizco.github.io/2017/10/20/Desarrolla-hacks-para-videojuegos.html</guid><category><![CDATA[hacks]]></category><category><![CDATA[programacion]]></category><category><![CDATA[c++]]></category><dc:creator><![CDATA[Chris Cornejo]]></dc:creator><pubDate>Fri, 20 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Inyector DLL]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>A penas comenzar algunos estarán rodeados de dudas y preguntas, así que, iniciaré dando algunas definiciones de manera rápida y ligera, para que todos marchemos al mismo paso. Este post estará dedicado al desarrollo de un Inyector DLL.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dll_dynamic_link_library">DLL (Dynamic Link Library)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>&#160;<br>
Son archivos que contienen código ejecutable y datos que pueden ser usados por uno o más programas. Mediante el uso de DLL, un programa puede ser modularizado en componentes separados. Exclusivos de los sistemas operativos Windows, tienen ".dll" como extensión.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_inyecci_n_dll">Inyección DLL</h2>
<div class="sectionbody">
<div class="paragraph">
<p>&#160;<br>
Es una técnica utilizada para ejecutar código dentro de otro proceso. Comúnmente es utilizada para influir o alterar el comportamiento de un programa.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_inyector">Inyector</h2>
<div class="sectionbody">
<div class="paragraph">
<p>&#160;<br>
Es el programa que lleva acabo la inyección de la DLL.</p>
</div>
<div class="paragraph">
<p>Existen diversas formas de inyectar DLL&#8217;s, en este post explicare la más facíl. Esta consiste en lo siguiente; Windows provee funciones para crear un hilo en cierta posición de memoria de un proceso externo, para ello reservamos memoria en el proceso, escribimos en ella la ruta de la DLL que queremos inyectar y creamos un hilo pasandole como parámetros el proceso, la dirección de memoria donde se encuentra la función LoadLibrary y la dirección de memoria que reservamos que escribimos anteriormente.</p>
</div>
<div class="paragraph">
<p>Para el desarrollo de este programa haremos uso del lenguaje de programación C++, aun  que no hace falta conocerlo para seguir el post, basta con tener conocimientos de POO.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_herramientas">Herramientas</h2>
<div class="sectionbody">
<div class="paragraph">
<p></p>
</div>
<div class="ulist">
<ul>
<li>
<p>IDE para C/C++<br></p>
</li>
<li>
<p>Compilador para C/C++</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Yo uilizare CodeBlocks con MinGW (implementación de los compiladores GCC) de 32 bit para Windows, ambos los puedes descargar desde <a href="http://www.codeblocks.org/downloads/binaries" target="_blank">aquí</a>.</p>
</div>
<div class="paragraph">
<p>Sin más preámbulo pasemos a la parte que todos esperaban (aah sí XD).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_proyecto_1_inyector">Proyecto 1: Inyector</h2>
<div class="sectionbody">
<div class="sect3">
<h4 id="_injector_h">Injector.h</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#ifndef INJECTOR_H
#define INJECTOR_H

class Injector
{
    public:void inject(char *dll, char *process);
};

#endif // INJECTOR_H</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_injector_cpp">Injector.cpp</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;windows.h&gt;

#include "Injector.h"

// Función que lleva acabo la inyección
void Injector::inject(char *dll, char *windowTitle)
{
    HWND window;
    DWORD pid;
    HANDLE process;
    LPVOID memory;
    SIZE_T write = 0;

    // Buscamos la ventana del proceso a inyectar
    window = FindWindowEx(0, 0, 0, windowTitle);

    // Buscamos el proceso a inyectar
    GetWindowThreadProcessId(window, &amp;pid);

    // Abrimos el proceso
    process = OpenProcess(PROCESS_ALL_ACCESS, false, pid);

    // Reservamos memoria en el proceso para la DLL
    memory = VirtualAllocEx(process, 0, strlen(dll),
    MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    // Escribimos en el proceso
    WriteProcessMemory(process, memory, (LPVOID)dll, strlen(dll), &amp;write);

    // Obtenemos el modulo de la DLL Kernel32
    HMODULE hModule = LoadLibrary("Kernel32.dll");
    // Obtenemos la dirección en memoria en la que se encuentra la
    // función LoadLibrary
    FARPROC tsr = GetProcAddress(hModule, "LoadLibraryA");

    // Creamos un hilo en el proceso
    CreateRemoteThread(process, 0, 0, (LPTHREAD_START_ROUTINE)tsr,memory, 0, 0);
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_main_cpp">Main.cpp</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;cstring&gt;
using std::strcpy;

#include &lt;iostream&gt;
using std::cout;
using std::cin;

#include &lt;string&gt;
using std::string;

#include "Injector.h"

int main()
{
    string aux;

    // Pide la ruta de la DLL
    cout &lt;&lt; "Path DLL: ";
    // Lee la ruta y la coloca en aux
    cin &gt;&gt; aux;

    // Convierte la variable aux a char*
    char *dll = new char[aux.length() + 1];
    strcpy(dll, aux.c_str());

    // Pide el título de la ventana
    cout &lt;&lt; "Window Title: ";
    // Lee el título de la ventana y lo coloca en aux
    cin &gt;&gt; aux;

    // Convierte la variable aux a char*
    char *windowTitle = new char[aux.length() + 1];
    strcpy(windowTitle, aux.c_str());

    // Instancia un objeto de la clase Injetor
    Injector injector;
    // Llama al método inject
    injector.inject(dll, windowTitle);

    delete [] dll;
    delete [] windowTitle;

    return 0;
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_proyecto_2_dll">Proyecto 2: DLL</h2>
<div class="sectionbody">
<div class="sect3">
<h4 id="_main_cpp_2">Main.cpp</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;windows.h&gt;

// Función que muestra un cuadro de dialogo
void message()
{
    MessageBoxA(0, "Bienvenido a Quickhub!", "DLL Message", 0);
}

BOOL APIENTRY DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    switch (fdwReason)
    {
        case DLL_PROCESS_ATTACH:
            // attach to process
            // return FALSE to fail DLL load
            // Crea un hilo
        CreateThread(0, 0, (LPTHREAD_START_ROUTINE)message, 0, 0, 0);
            break;

        case DLL_PROCESS_DETACH:
            // detach from process
            break;

        case DLL_THREAD_ATTACH:
            // attach to thread
            break;

        case DLL_THREAD_DETACH:
            // detach from thread
            break;
    }

    return TRUE; // succesful
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>IMPORTANTE</strong>: si el programa en el vamos a realizar la inyección es de 32 bit, la DLL a inyectar debe ser compilada para 32 bit. Pasa lo mismo con los programas de 64 bit. No podemos inyectar una DLL compilada para 32 bit en un programa de 64 bit, ni viceversa.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_demostraci_n">Demostración</h2>
<div class="sectionbody">
<div class="paragraph">
<p>&#160;<br></p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="500" height="375" src="https://www.youtube.com/embed/AoPvDXoEj5E?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
Seguramente más de uno esté pensando, ¿Qué utilidad tiene agregar un cuadro de dialogo?. Una ballena se devora un mordisco a la vez. En mi siguiente post haremos más que agregar un simple cuadro de dialogo, haremos nuestros propios hacks para videojuegos.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_repositorios">Repositorios</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://github.com/chrizco/MyDLL" target="_blank">Proyecto DLL</a><br>
<a href="https://github.com/chrizco/DLL-Injector" target="_blank">Proyecto DLL Injector</a><br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_referencias">Referencias</h2>
<div class="sectionbody">
<div class="paragraph">
<p>&#160;<br>
<a href="https://es.wikipedia.org/wiki/Biblioteca_de_enlace_din%C3%A1mico" target="_blank">DLL - Wikipedia</a><br>
<a href="https://support.microsoft.com/en-us/kb/815065" target="_blank">What is a DLL? - Microsof</a><br>
<a href="https://en.wikipedia.org/wiki/DLL_injection" target="_blank">DLL injection - Wikipedi</a><br>
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633500(v=vs.85).aspx" target="_blank">FindWindowEx - Microsof</a><br>
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633522(v=vs.85).aspx" target="_blank">GetWindowThreadProcessId - Microsof</a><br>
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms684320(v=vs.85).aspx" target="_blank">OpenProcess - Microsof</a><br>
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366890(v=vs.85).aspx" target="_blank">VirtualAllocEx - Microsof</a><br>
<a href="https://msdn.microsoft.com/en-us/library/windows/esktop/ms681674(v=vs.85).aspx" target="_blank">WriteProcessMemory - Microsof</a><br>
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms684175(v=vs.85).aspx" target="_blank">LoadLibrary - Microsoft</a><br>
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms683212(v=vs.85).aspx" target="_blank">GetProcAddress - Microsoft</a><br>
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682437(v=vs.85).aspx" target="_blank">CreateRemoteThread - MIcrosoft</a><br></p>
</div>
</div>
</div>]]></description><link>https://chrizco.github.io/2017/10/19/Inyector-DLL.html</link><guid isPermaLink="true">https://chrizco.github.io/2017/10/19/Inyector-DLL.html</guid><category><![CDATA[desktop]]></category><category><![CDATA[programacion]]></category><category><![CDATA[c++]]></category><dc:creator><![CDATA[Chris Cornejo]]></dc:creator><pubDate>Thu, 19 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hello World!]]></title><description><![CDATA[<div class="paragraph">
<p>Este es el primer post del blog, se dice que el primer paso es el más difícil, así que lo difícil ya esta hecho. En este blog se trataran diversos temas, de las siguientes áreas: programación, electrónica, desarrollo de videojuegos, incluso series y películas relacionadas a estas áreas.</p>
</div>
<div class="paragraph">
<p>Para abordar dichos temas, escribiré un post para ilustrarlos, en los cuales explicaré conceptos, utilizando imágenes, videos. También se incluirán fragmentos de código, los proyectos realizados se alojaran en un repositorio en github para que puedan acceder a ellos.</p>
</div>
<div class="paragraph">
<p>Sin aburrirlos más, me despidos.</p>
</div>]]></description><link>https://chrizco.github.io/2017/10/19/Hello-World.html</link><guid isPermaLink="true">https://chrizco.github.io/2017/10/19/Hello-World.html</guid><dc:creator><![CDATA[Chris Cornejo]]></dc:creator><pubDate>Thu, 19 Oct 2017 00:00:00 GMT</pubDate></item></channel></rss>